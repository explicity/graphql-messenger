type Query {
  info: String!
  messages(
    filter: String
    skip: Int
    first: Int
    orderBy: MessagesOrderByInput
  ): Messages!
}

enum MessagesOrderByInput {
  createdAt_DESC
  createdAt_ASC
  likes_DESC
  likes_ASC
  dislikes_DESC
  dislikes_ASC
}

type Mutation {
  postMessage(body: String!): Message!
  postMessageLike(messageId: ID!): Message!
  postMessageDislike(messageId: ID!): Message!
  postReply(messageId: ID!, body: String!): Reply!
}

type Subscription {
  newMessage: Message
  newReply: Reply
  newMessageAction: Message
}

type Messages {
  messagesList: [Message!]!
  count: Int!
}

type Message {
  id: ID!
  body: String!
  likeCounter: Int!
  dislikeCounter: Int!
  replies: [Reply]
}

type Reply {
  id: ID!
  body: String!
  message: Message!
}
